#! /usr/bin/env python
# -*- encoding: utf-8 -*-
# Copyright (c) 2013 Alexandre `Zopieux` Macabies <web@zopieux.com>
# Copyright (c) 2013 Association Prologin <info@prologin.org>
#
# Prologin-SADM is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Prologin-SADM is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Prologin-SADM.  If not, see <http://www.gnu.org/licenses/>.

import logging
import multiprocessing
import prologin.config
import prologin.log
import prologin.presencesync
import os
import re
import signal
import subprocess
import time
from rconite import connect
from utils import login_from_host

SERVER_CFG = prologin.config.load('minecraft')

REG_RCON = re.compile(r'^[\d\s\-:]* \[INFO\] RCON running')
REG_LOGIN = re.compile(r'^[\d\s\-:]* \[INFO\] (?P<nick>.+?)\[/(?P<ip>[\d\.]+):(?P<port>\d+)] logged in')

presence_client = prologin.presencesync.connect()


class MCWatchLog:
    def __init__(self):
        self.cont = True
        self.rcon = None

        log_pah = os.path.join(SERVER_CFG['server']['working_dir'], 'server.log')
        self.fp = open(log_pah, 'r')

    def run(self):
        while self.cont:
            new = self.fp.readline()

            if new:
                self.handle(new)
            else:
                time.sleep(SERVER_CFG['server']['log_check']['wait'])

    def handle(self, line):
        if self.rcon is None:
            match = REG_RCON.match(line)
            if match is None:
                return

            self.rcon = connect(
                SERVER_CFG['server']['host'],
                SERVER_CFG['properties']['rcon.port'],
                SERVER_CFG['properties']['rcon.password'],
                SERVER_CFG['server']['log_check']['charset'],
            )

            # kick already logged-in players
            rep = self.rcon.command('list')
            players = rep.split(':', 1)[1].split(', ')

            logging.info("Connected to RCON; kicking %d illegal players",
                len(players))

            for nick in players:
                self.kick(nick)

            return

        match = REG_LOGIN.match(line)

        if match is None:
            return

        ip = match.group('ip')
        nick = match.group('nick')
        # FIXME: may need hostname instead of IP
        expected_nick = login_from_host(ip)

        if (SERVER_CFG['server']['log_check']['case_sensitve']
            and expected_nick != nick) or expected_nick.lower() != nick.lower():

            logging.info(
                "IP `%s` should map to nick `%s` but nick is `%s`",
                ip, expected_nick, nick
            )

            self.kick(nick)

    def kick(self, nick):
        if self.rcon is None:
            logging.error("Tried to kick but RCON is not up yet")
            return

        if '\n' in nick:
            logging.warn("Tried to kick malicious nick")
            return

        msg = self.rcon.command('kick %s' % nick)

        if msg.startswith('Kicked'):
            logging.info("Kicked `%s`", nick)
        else:
            logging.error("Error kicking `%s`: %s", nick, msg)


def install_server_properties():
    with open(os.path.join(SERVER_CFG['server']['working_dir'], 'server.properties'), 'w', encoding='latin1') as f:
        f.write("#Minecraft server properties\n")
        f.write("#Generated by Prolocraft\n")
        for key, value in SERVER_CFG['properties'].items():
            f.write("%s=%s\n" % (key.replace('_', '-'), value))

        logging.info("Wrote %s" % f.name)


if __name__ == '__main__':
    prologin.log.setup_logging('minecraft')

    watchlog = MCWatchLog()

    def signal_handler(signal, frame):
        watchlog.cont = False

    signal.signal(signal.SIGINT, signal_handler)

    install_server_properties()

    os.chdir(SERVER_CFG['server']['working_dir'])

    # really launch the server
    subprocess.Popen([
        'java'
        '-Xmx1024M',
        '-Xms1024M',
        '-jar %s' % os.path.join(SERVER_CFG['server']['working_dir'], 'minecraft_server.jar'),
        'nogui',
    ])
    logging.info("Launched minecraft_server.jar")

    time.sleep(2)  # just to be sure server.log is created

    p = multiprocessing.Process(target=watchlog.run)
    p.start()
    logging.info("Launched MCWatchLog")
    p.join()
